// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  password      String?
  emailVerified DateTime?
  image         String?
  role          UserRole  @default(USER)
  accountType   AccountType @default(INDIVIDUAL)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Monetization fields
  membershipTier    MembershipTier @default(BASIC)
  membershipExpiry  DateTime?
  stripeCustomerId  String?
  totalSpent        Float @default(0)
  totalEarned       Float @default(0)
  listingCount      Int @default(0)

  accounts      Account[]
  sessions      Session[]
  listings      Listing[]
  offers        Offer[]
  messages      Message[]
  reviews       Review[]
  payments      Payment[]
  transactions  Transaction[]
  notifications Notification[]
}

model Listing {
  id          String        @id @default(cuid())
  title       String
  description String
  category    String        // WATCH, BAG, JEWELRY
  brand       String?
  model       String?
  year        Int?
  condition   String        // NEW, EXCELLENT, GOOD, FAIR
  askingPrice Float
  images      String // JSON string for SQLite
  status      ListingStatus @default(ACTIVE)
  endDate     DateTime?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  sellerId    String
  seller      User          @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  offers      Offer[]
  messages    Message[]
  reviews     Review[]
  payments    Payment[]
  transactions Transaction[]
}

model Offer {
  id        String     @id @default(cuid())
  amount    Float
  message   String?
  status    OfferStatus @default(PENDING)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  buyerId   String
  buyer     User       @relation(fields: [buyerId], references: [id], onDelete: Cascade)
  listingId String
  listing   Listing    @relation(fields: [listingId], references: [id], onDelete: Cascade)
  payments  Payment[]
}

model Message {
  id        String   @id @default(cuid())
  content   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())

  senderId  String
  sender    User     @relation(fields: [senderId], references: [id], onDelete: Cascade)
  listingId String
  listing   Listing  @relation(fields: [listingId], references: [id], onDelete: Cascade)
}

model Review {
  id        String   @id @default(cuid())
  rating    Int
  comment   String?
  createdAt DateTime @default(now())

  reviewerId String
  reviewer   User     @relation(fields: [reviewerId], references: [id], onDelete: Cascade)
  listingId  String
  listing    Listing  @relation(fields: [listingId], references: [id], onDelete: Cascade)
}

model Payment {
  id            String        @id @default(cuid())
  amount        Float
  currency      String        @default("USD")
  status        PaymentStatus @default(PENDING)
  stripePaymentIntentId String?
  stripeSessionId String?
  commission    Float @default(0)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  buyerId       String
  buyer         User          @relation(fields: [buyerId], references: [id], onDelete: Cascade)
  listingId     String
  listing       Listing       @relation(fields: [listingId], references: [id], onDelete: Cascade)
  offerId       String?
  offer         Offer?        @relation(fields: [offerId], references: [id])
  transaction   Transaction?
}

model Transaction {
  id            String            @id @default(cuid())
  type          TransactionType
  amount        Float
  currency      String            @default("USD")
  status        TransactionStatus @default(PENDING)
  description   String?
  stripePaymentIntentId String?
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt

  userId        String
  user          User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  listingId     String?
  listing       Listing?          @relation(fields: [listingId], references: [id], onDelete: Cascade)
  payment       Payment?          @relation(fields: [paymentId], references: [id])
  paymentId     String?           @unique
}

model Notification {
  id        String   @id @default(cuid())
  title     String
  message   String
  type      String   // INFO, SUCCESS, WARNING, ERROR
  read      Boolean  @default(false)
  createdAt DateTime @default(now())

  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum UserRole {
  USER
  ADMIN
}

enum AccountType {
  INDIVIDUAL  // Persoană fizică
  COMPANY     // Companie
}

enum MembershipTier {
  BASIC       // Free tier
  PREMIUM     // €49/month
  VIP         // €99/month  
  DIAMOND     // €999/month
}

enum ListingStatus {
  ACTIVE
  SOLD
  EXPIRED
  CANCELLED
}

enum OfferStatus {
  PENDING
  ACCEPTED
  REJECTED
  EXPIRED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
  REFUNDED
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
  REFUNDED
}

enum TransactionType {
  PAYMENT
  COMMISSION
  REFUND
  WITHDRAWAL
}
